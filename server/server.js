import express from "express";
import { PrismaClient } from "@prisma/client";
import cors from "cors";
import path from "path";
import { fileURLToPath } from "url";




const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(fileURLToPath(import.meta.url));

if (!process.env.DATABASE_URL) {
  process.env.DATABASE_URL = `file:${path.join(__dirname, 'prisma/dev.db')}`;
}

const allowedOrigins = ['https://amaurycelarier.netlify.app', 'http://localhost:5173'];

const app = express();
const prisma = new PrismaClient();

prisma.$connect()
  .then(() => console.log("‚úÖ Connexion Prisma r√©ussie"))
  .catch((error) => console.error("‚ùå Erreur connexion Prisma:", error));

app.use((req, res, next) => {
  console.log(`Requ√™te re√ßue : ${req.method} ${req.url} - Origin: ${req.headers.origin || 'Aucune'}`);
  next();
});

app.use(cors({
  origin: true,
  credentials: true
}));

app.use(express.json());


app.use((req, res, next) => {
  console.log(`Requ√™te re√ßue : ${req.method} ${req.url}`);
  next();
});

app.get('/admin/seed', async (req, res) => {
  try {
    // Copiez le contenu de votre seed.js ici

    console.log("üå± D√©but du seeding...");
    console.log("R√©initialisation des projets...");

   // Supprime toutes les entr√©es
   await prisma.image.deleteMany();
   await prisma.paragraph.deleteMany();
   await prisma.projectSkill.deleteMany();
   await prisma.skill.deleteMany();
   await prisma.project.deleteMany();

    // Cr√©ation des comp√©tences
    const skills = await prisma.$transaction([
        prisma.skill.create({ data: { name: "Cr√©ativit√©", type: "SOFT" } }),                            // Cr√©ativit√© [0]               { skill: { connect: { id: skills[0].id } } }, // Cr√©ativit√©         
        prisma.skill.create({ data: { name: "Autonomie", type: "SOFT" } }),                             // Autonomie [1]                { skill: { connect: { id: skills[1].id } } }, // Autonomie
        prisma.skill.create({ data: { name: "Minutie", type: "SOFT" } }),                               // Minutie [2]                  { skill: { connect: { id: skills[2].id } } }, // Minutie
        prisma.skill.create({ data: { name: "Mod√©lisation 3D", type: "TECHNICAL" } }),                  // Mod√©lisation 3D [3]          { skill: { connect: { id: skills[3].id } } }, // Mod√©lisation 3D
        prisma.skill.create({ data: { name: "Texturing", type: "TECHNICAL" } }),                        // Texturing [4]                { skill: { connect: { id: skills[4].id } } }, // Texturing
        prisma.skill.create({ data: { name: "Eclairage", type: "TECHNICAL" } }),                        // Eclairage [5]                { skill: { connect: { id: skills[5].id } } }, // Eclairage
        prisma.skill.create({ data: { name: "Composition visuelle", type: "TECHNICAL" } }),             // Composition visuelle [6]     { skill: { connect: { id: skills[6].id } } }, // Composition visuelle
        prisma.skill.create({ data: { name: "Optimisation 3D", type: "TECHNICAL" } }),                  // Optimisation 3D [7]          { skill: { connect: { id: skills[7].id } } }, // Optimisation 3D
        prisma.skill.create({ data: { name: "Travail en √©quipe", type: "SOFT" } }),                     // Travail en √©quipe [8]        { skill: { connect: { id: skills[8].id } } }, // Travail en √©quipe
        prisma.skill.create({ data: { name: "Communication", type: "SOFT" } }),                         // Communication [9]            { skill: { connect: { id: skills[9].id } } }, // Communication
        prisma.skill.create({ data: { name: "R√©solution de probl√®me", type: "SOFT" } }),                // R√©solution de probl√®me [10]  { skill: { connect: { id: skills[10].id } } }, // R√©solution de probl√®me
        prisma.skill.create({ data: { name: "Animation 3D", type: "TECHNICAL" } }),                     // Animation 3D [11]            { skill: { connect: { id: skills[11].id } } }, // Animation 3D
        prisma.skill.create({ data: { name: "Motion Capture", type: "TECHNICAL" } }),                   // Motion Capture [12]          { skill: { connect: { id: skills[12].id } } }, // Motion Capture
        prisma.skill.create({ data: { name: "Unreal Engine 5", type: "TECHNICAL" } }),                  // Unreal Engine 5 [13]         { skill: { connect: { id: skills[13].id } } }, // Unreal Engine 5
        prisma.skill.create({ data: { name: "Design de gameplay", type: "TECHNICAL" } }),               // Design de gameplay [14]      { skill: { connect: { id: skills[14].id } } }, // Design de gameplay
        prisma.skill.create({ data: { name: "Accessibilit√©", type: "TECHNICAL" } }),                    // Accessibilit√© [15]           { skill: { connect: { id: skills[15].id } } }, // Accessibilit√©
        prisma.skill.create({ data: { name: "Unwrap Editing", type: "TECHNICAL" } }),                   // Unwrap Editing [16]          { skill: { connect: { id: skills[16].id } } }, // Unwrap Editing
        prisma.skill.create({ data: { name: "Rigueur", type: "SOFT" } }),                               // Rigueur [17]                 { skill: { connect: { id: skills[17].id } } }, // Rigueur
        prisma.skill.create({ data: { name: "D√©veloppement web", type: "TECHNICAL" } }),                // D√©veloppement web [18]       { skill: { connect: { id: skills[18].id } } }, // D√©veloppement web
        prisma.skill.create({ data: { name: "Templating", type: "TECHNICAL" } }),                       // Templating [19]              { skill: { connect: { id: skills[19].id } } }, // Templating
        prisma.skill.create({ data: { name: "ORM", type: "TECHNICAL" } }),                              // ORM [20]                     { skill: { connect: { id: skills[20].id } } }, // ORM
        prisma.skill.create({ data: { name: "Base de donn√©e", type: "TECHNICAL" } }),                   // Base de donn√©e [21]          { skill: { connect: { id: skills[21].id } } }, // Base de donn√©e
        prisma.skill.create({ data: { name: "CRUD", type: "TECHNICAL" } }),                             // CRUD [22]                    { skill: { connect: { id: skills[22].id } } }, // CRUD
        prisma.skill.create({ data: { name: "Leadership", type: "SOFT" } }),                            // Leadership [23]              { skill: { connect: { id: skills[23].id } } }, // Leadership
        prisma.skill.create({ data: { name: "Gestion d'√©quipe", type: "SOFT" } }),                      // Gestion d'√©quipe [24]        { skill: { connect: { id: skills[24].id } } }, // Gestion d'√©quipe
        prisma.skill.create({ data: { name: "Esprit critique", type: "SOFT" } }),                       // Esprit critique [25]         { skill: { connect: { id: skills[25].id } } }, // Esprit critique
        prisma.skill.create({ data: { name: "Planification de projet", type: "SOFT" } }),               // Planification de projet [26] { skill: { connect: { id: skills[26].id } } }, // Planification de projet
        prisma.skill.create({ data: { name: "Eco-conception", type: "TECHNICAL" } }),                   // Eco-conception [27]          { skill: { connect: { id: skills[27].id } } }, // Eco-conception

    ]);

    console.log("Comp√©tences cr√©√©es avec succ√®s !");

    // Cr√©ation d'un projet avec plusieurs images, paragraphes et comp√©tences

    // Cr√©ation CyberPunk City Wallpaper
    const project_01 = await prisma.project.create({
        data: {
            title: "CyberPunk City Wallpaper",
            description: "Un wallpaper 3D en style cyberpunk r√©alis√© sur Blender. Ce projet personnel m‚Äôa permis d‚Äôexplorer la composition, l‚Äô√©clairage, le texturing et la mod√©lisation 3D tout en cr√©ant une sc√®ne immersive et d√©taill√©e.",
            link: "https://github.com/AmauryCelarier",
            createdAt: new Date("2024-10-01"),
            duration: 14, 
            images: {
                create: [
                    { path: "images/CyberPunkCityWallPaper/CyberPunkCityWallPaper_01.png" },
                    { path: "images/CyberPunkCityWallPaper/CyberPunkCityWallPaper_02.png" },
                ],
            },
            paragraphs: {
                create: [
                    { content: "J‚Äôai toujours √©t√© attir√© par l‚Äôesth√©tique cyberpunk : ses jeux de lumi√®re, ses ambiances futuristes et ses environnements urbains denses. En cr√©ant ce fond d‚Äô√©cran, mon objectif √©tait de me donner un d√©fi technique et artistique. Ce projet a aussi √©t√© l‚Äôoccasion de me faire un fond d‚Äô√©cran personnalis√© qui me correspond. De plus, ce travail m‚Äôa servi d‚Äôentra√Ænement pour une map d√©velopp√©e sur PLSA, o√π j‚Äôai appliqu√© les m√™mes principes d‚Äôenvironnement design." },
                    { content: "J‚Äôai r√©alis√© toute la mod√©lisation sur Blender, en construisant les b√¢timents et les structures en jouant sur les formes et les hauteurs pour donner de la profondeur √† la sc√®ne. Pour le texturing, j‚Äôai utilis√© Adobe Substance 3D Painter, ce qui m‚Äôa permis d‚Äôajouter des d√©tails r√©alistes comme des surfaces us√©es et des reflets sur les mat√©riaux m√©talliques, ou encore rendre la route humide. L‚Äô√©clairage √©tait un √©l√©ment essentiel pour cr√©er une ambiance cyberpunk futuriste. J‚Äôai utilis√© des spots d‚Äô√©clairages ou des points lumineux pour repr√©senter des n√©ons artificiels ou tout simplement des lumi√®res d‚Äôimmeuble. J‚Äôai √©galement ajout√© une l√©g√®re brume pour donner un effet de profondeur et rendre l‚Äôatmosph√®re plus immersive." },
                    { content: "L‚Äôun des plus grands d√©fis a √©t√© d‚Äôoptimiser la sc√®ne pour qu‚Äôelle reste fluide tout en ayant un rendu d√©taill√©. J‚Äôai d√ª ajuster les lumi√®res et les textures, mais √©galement, fait en sorte que la plupart des objets soient en low poly, afin d‚Äô√©viter de surcharger les calcul de rendu. Un autre point important a √©t√© l‚Äô√©quilibre visuel : trop d‚Äô√©l√©ments pouvaient rendre la sc√®ne illisible, j‚Äôai donc travaill√© la composition pour que l‚Äô≈ìil du spectateur soit guid√© naturellement √† travers l‚Äôimage." },
                    { content: "Ce projet m‚Äôa permis d‚Äôam√©liorer ma mod√©lisation 3D, mon texturing et ma gestion de l‚Äô√©clairage. Il m‚Äôa aussi aid√© √† d√©velopper mon sens du d√©tail et √† mieux organiser une sc√®ne complexe. Enfin, les comp√©tences acquises ici m‚Äôont √©t√© utiles pour d‚Äôautres projets, notamment dans la cr√©ation d‚Äôenvironnements pour des map sur PLSA." },
                ],
            },
            skills: {
                create: [
                    { skill: { connect: { id: skills[0].id } } }, // Cr√©ativit√©
                    { skill: { connect: { id: skills[1].id } } }, // Autonomie
                    { skill: { connect: { id: skills[2].id } } }, // Minutie
                    { skill: { connect: { id: skills[3].id } } }, // Mod√©lisation 3D
                    { skill: { connect: { id: skills[16].id } } }, // Unwrap Editing
                    { skill: { connect: { id: skills[4].id } } }, // Texturing
                    { skill: { connect: { id: skills[5].id } } }, // Eclairage
                    { skill: { connect: { id: skills[6].id } } }, // Composition visuelle
                    { skill: { connect: { id: skills[7].id } } }, // Optimisation 3D
                ],
            },
        },
    });

    console.log(`Projet "${project_01.title}" cr√©√© avec succ√®s !`);

    // Cr√©ation PLSA - Project Legion : Story of Amalth√©is
    const project_02 = await prisma.project.create({
        data: {
            title: "PLSA - Project Legion : Story of Amalth√©is",
            description: "PLSA est un jeu de combat de plateforme strat√©gique o√π r√©flexes et r√©flexion sont vos meilleures armes. Affrontez des adversaires redoutables dans des ar√®nes dynamiques, amassez des ressources pour acheter des objets qui am√©lioreront vos statistiques, et adaptez votre style de jeu en fonction de vos opposants et des objets disponibles.",
            link: "https://github.com/AmauryCelarier",
            createdAt: new Date("2024-11-01"),
            duration: 120, 
            model3D: "model_3D/PLSA.glb",
            images: {
                create: [
                    { path: "images/PLSA/PLSA_01.png" },
                    { path: "images/PLSA/PLSA_02.png" },
                    { path: "images/PLSA/PLSA_03.png" },
                    { path: "images/PLSA/PLSA_04.png" },
                    { path: "images/PLSA/PLSA_05.png" },
                    { path: "images/PLSA/PLSA_06.png" },
                    { path: "images/PLSA/PLSA_07.png" },
                ],
            },
            paragraphs: {
                create: [
                    { content: "Les jeux de type Brawler, bien que populaires et ancr√©s dans l‚Äôhistoire du jeu vid√©o, peinent aujourd‚Äôhui √† se renouveler. Le gameplay se limite souvent √† des affrontements r√©p√©titifs, sans r√©elle profondeur strat√©gique ni engagement sur des th√©matiques modernes. L‚Äôid√©e de PL:SA est n√©e de cette constatation : cr√©er un Brawler qui ne soit pas qu‚Äôun jeu d‚Äôaction, mais une exp√©rience hybride, croisant les codes du Brawler et ceux du MOBA, tout en int√©grant des valeurs d‚Äôinnovation, d‚Äô√©coresponsabilit√© et d‚Äôaccessibilit√©." },
                    { content: "Mon implication dans PL:SA a couvert un large √©ventail de domaines techniques et artistiques. J‚Äôai pris en charge une grande partie de la mod√©lisation 3D des personnages et environnements, en m‚Äôassurant que chaque asset soit optimis√©, afin de r√©duire la charge GPU sans nuire √† l‚Äôesth√©tique globale du jeu. Le design des ar√®nes et des combattants a √©t√© pens√© pour √™tre √† la fois stylis√©, lisible et fonctionnel dans un contexte comp√©titif. En parall√®le, j‚Äôai travaill√© sur le texturing via Substance 3D Painter, ce qui m‚Äôa permis d‚Äôajouter des d√©tails visuels subtils, des mat√©riaux coh√©rents, et des effets de surface adapt√©s √† notre direction artistique. J‚Äôai √©galement g√©r√© l‚Äô√©clairage dans Unreal Engine, en jouant sur les contrastes, les sources lumineuses dynamiques et les ambiances color√©es pour donner du cachet aux diff√©rentes maps. Sur le plan du gameplay, j‚Äôai programm√© des m√©caniques en C++ et en Blueprints, en particulier les interactions entre les joueurs, les effets visuels li√©s aux attaques, ou encore les interactions des joueurs avec l‚Äôenvironnement. J‚Äôai aussi contribu√© √† l‚Äôint√©gration de la motion capture pour rendre les animations plus fluides et naturelles, ce qui a grandement am√©lior√© l‚Äôimmersion du jeu." },
                    { content: "Un des principaux d√©fis a √©t√© l‚Äôoptimisation des ressources : malgr√© une sc√®ne complexe, nous avons r√©ussi √† obtenir un jeu fluide en optimisant les mod√®les et textures, r√©duisant leur taille sans perdre en qualit√© visuelle. Un autre enjeu majeur fut l‚Äôaccessibilit√© : nous avons int√©gr√© des contrastes visuels, des contr√¥les adaptables et une interface claire d√®s la conception, pour que le jeu soit accessible √† tous types de joueurs." },
                    { content: "Ce projet m‚Äôa permis de consolider mes comp√©tences en mod√©lisation 3D, programmation de gameplay, optimisation, mais aussi en travail d‚Äô√©quipe et en gestion de projet agile. Il repr√©sente un tournant dans ma mani√®re d‚Äôaborder le game design en tenant compte d‚Äôenjeux actuels comme l‚Äô√©co-conception et l‚Äôinclusivit√©. Il m‚Äôa √©galement pr√©par√© √† des projets plus complexes dans le domaine du jeu vid√©o." },
                ],
            },
            skills: {
                create: [
                    { skill: { connect: { id: skills[0].id } } }, // Cr√©ativit√©
                    { skill: { connect: { id: skills[1].id } } }, // Autonomie
                    { skill: { connect: { id: skills[3].id } } }, // Mod√©lisation 3D
                    { skill: { connect: { id: skills[16].id } } }, // Unwrap Editing
                    { skill: { connect: { id: skills[4].id } } }, // Texturing
                    { skill: { connect: { id: skills[5].id } } }, // Eclairage
                    { skill: { connect: { id: skills[7].id } } }, // Optimisation 3D
                    { skill: { connect: { id: skills[9].id } } }, // Communication
                    { skill: { connect: { id: skills[10].id } } }, // R√©solution de probl√®me
                    { skill: { connect: { id: skills[11].id } } }, // Animation
                    { skill: { connect: { id: skills[12].id } } }, // Motion Capture
                    { skill: { connect: { id: skills[13].id } } }, // Unreal Engine 5
                    { skill: { connect: { id: skills[14].id } } }, // Design de gameplay
                    { skill: { connect: { id: skills[15].id } } }, // Accessibilit√©
                    
                ],
            },
        },
    });

    console.log(`Projet "${project_02.title}" cr√©√© avec succ√®s !`);

    // Cr√©ation Vapeur
    const project_03 = await prisma.project.create({
        data: {
            title: "Vapeur - Site de gestion de jeux vid√©o",
            description: "Vapeur est une application web dynamique de gestion de collection de jeux vid√©o, d√©velopp√©e en √©quipe avec Express.js, SQLite et Prisma. Ce projet nous a permis d‚Äôexplorer les bases du d√©veloppement web full-stack, avec un focus sur la structuration de base de donn√©es relationnelles, les routes REST et le rendu de pages dynamiques via Handlebars.",
            link: "https://github.com/AmauryCelarier/Vapeur",
            createdAt: new Date("2024-12-01"),
            duration: 14, 
            images: {
                create: [
                    { path: "images/Vapeur/Vapeur_01.png" },
                    { path: "images/Vapeur/Vapeur_02.png" },
                    { path: "images/Vapeur/Vapeur_03.png" },
                ],
            },
            paragraphs: {
                create: [
                    { content: "Le but de ce projet √©tait de concevoir une application compl√®te et fonctionnelle permettant de g√©rer une collection de jeux vid√©o. Nous avons abord√© ce projet comme une opportunit√© de nous familiariser avec les frameworks web modernes tout en appliquant des bonnes pratiques de d√©veloppement. L‚Äôid√©e √©tait de cr√©er une sorte de ‚Äúmini Steam‚Äù p√©dagogique, o√π l‚Äôon pourrait consulter, ajouter, modifier et supprimer des jeux, des √©diteurs et des genres." },
                    { content: "Nous avons utilis√© Express.js comme moteur principal de notre application, avec Handlebars (HBS) pour g√©n√©rer les vues c√¥t√© serveur. Prisma a √©t√© utilis√© pour la gestion de la base de donn√©es SQLite, nous permettant de manipuler facilement les relations entre jeux, √©diteurs et genres. J‚Äôai personnellement contribu√© √†  la conception de la base de donn√©es via Prisma, √† l‚Äôimpl√©mentation des routes principales (CRUD pour jeux, genres et √©diteurs), au templating des pages dynamiques, et √† l‚Äôajout de fonctionnalit√©s bonus comme l‚Äôint√©gration d‚Äôimages de jeux et la mise en avant des jeux sur la page d‚Äôaccueil." },
                    { content: "Un des d√©fis majeurs fut la gestion des relations entre entit√©s (jeu ‚Üî √©diteur ‚Üî genre), notamment pour les routes de d√©tail et de modification. Pour y r√©pondre, nous avons structur√© les appels Prisma de fa√ßon claire et optimis√© les requ√™tes pour obtenir les donn√©es associ√©es dans une seule op√©ration. Un autre point abord√© √† √©t√© la coh√©rence du design, que nous avons progressivement am√©lior√©e en CSS tout en conservant un layout √©pur√© et lisible. Enfin, il a fallu veiller √† la clart√© du code pour √™tre capable de le comprendre et l‚Äôexpliquer, y compris les parties non r√©alis√©es directement." },
                    { content: "Ce projet a √©t√© une excellente introduction au d√©veloppement web dynamique. Il m‚Äôa permis de mieux comprendre la logique des applications REST, de m‚Äôinitier √† la manipulation d‚ÄôORM avec Prisma, et de structurer une interface utilisateur dynamique. Les comp√©tences acquises ici me servent d√©sormais de base solide pour des projets web plus complexes." },
                ],
            },
            skills: {
                create: [
                    { skill: { connect: { id: skills[1].id } } }, // Autonomie
                    { skill: { connect: { id: skills[8].id } } }, // Travail en √©quipe
                    { skill: { connect: { id: skills[17].id } } }, // Rigueur
                    { skill: { connect: { id: skills[18].id } } }, // D√©veloppement web
                    { skill: { connect: { id: skills[19].id } } }, // Templating
                    { skill: { connect: { id: skills[20].id } } }, // ORM
                    { skill: { connect: { id: skills[21].id } } }, // Base de donn√©e
                    { skill: { connect: { id: skills[22].id } } }, // CRUD
                ],
            },
        },
    });

    console.log(`Projet "${project_03.title}" cr√©√© avec succ√®s !`);

    // Cr√©ation Humanity - Mus√©e virtuel

    const project_04 = await prisma.project.create({
        data: {
            title: "Humanity - Mus√©e virtuel",
            description: "Projet universitaire r√©alis√© en groupe de 6, Humanity est une exp√©rience immersive en 3D sur le th√®me de Martin Luther King et de son combat contre le racisme. D√©velopp√© sous Unreal Engine 5, ce mus√©e interactif prend la forme d‚Äôun escape game narratif, dans lequel les visiteurs d√©couvrent des ≈ìuvres engag√©es √† travers un parcours sc√©naris√©. Le mus√©e, initialement un temple romain vide, a √©t√© compl√®tement transform√© par notre √©quipe, avec une forte dimension √©thique, artistique et √©co-responsable.",
            link: "https://github.com/AmauryCelarier",
            createdAt: new Date("2024-01-10"),
            duration: 120, 
            model3D: "model_3D/Humanity.glb",
            images: {
                create: [
                    { path: "images/Humanity/Humanity_01.png" },
                    { path: "images/Humanity/Humanity_02.png" },
                    { path: "images/Humanity/Humanity_03.png" },
                    { path: "images/Humanity/Humanity_04.png" },
                    { path: "images/Humanity/Humanity_05.png" },
                    { path: "images/Humanity/Humanity_06.png" },
                ],
            },
            paragraphs: {
                create: [
                    { content: "L‚Äôid√©e fondatrice de *Humanity* repose sur un double objectif : sensibiliser √† la question du racisme √† travers l‚Äôhistoire de Martin Luther King, et proposer une exp√©rience interactive marquante, o√π le joueur n‚Äôest pas simple spectateur, mais v√©ritable acteur de sa progression. Plut√¥t que de concevoir un mus√©e traditionnel, nous avons choisi la forme d‚Äôun escape game symbolique. Le joueur commence enferm√© dans un mus√©e repr√©sentant l‚Äôhistoire du racisme, et doit en sortir pour atteindre un espace final de paix et de libert√©. Chaque zone du mus√©e incarne une √©poque ou un aspect de cette histoire (esclavage, s√©gr√©gation, lutte pour les droits civiques, espoir). √Ä travers ce cheminement, les ≈ìuvres s√©lectionn√©es prennent tout leur sens : elles accompagnent la narration, provoquent la r√©flexion, et marquent par leur port√©e √©motionnelle et historique." },
                    { content: "Le projet s‚Äôest construit autour de cinq grands p√¥les de travail : la recherche et s√©lection des ≈ìuvres, la conception du gameplay, la mod√©lisation 3D, la programmation du jeu, et l‚Äôoptimisation √©cologique du rendu. D√®s le d√©part, j‚Äôai pris en charge l‚Äôorganisation du projet en tant que responsable d‚Äô√©quipe. Cela impliquait de d√©finir les t√¢ches de chacun selon leurs envies et comp√©tences, de planifier les √©tapes de production, de maintenir une communication fluide, et d‚Äôassurer le respect du calendrier. Mon r√¥le √©tait aussi de veiller √† la coh√©rence globale du projet et de superviser les diff√©rentes livraisons interm√©diaires. Sur le fond, nous avons pris le temps de rechercher des ≈ìuvres qui avaient du sens dans notre parcours narratif. Nous avons retenu 8 ≈ìuvres : 3 sculptures, 3 peintures, une affiche, et un po√®me √† savoir : ‚ÄúThe Problem We All Live With‚Äù - Norman Rockwell; ‚ÄúCueilleurs de coton‚Äù - William Aiken Walker; ‚ÄúL‚ÄôEx√©cution‚Äù - Bon Thompson; ‚ÄúStatue of Emmett Till‚Äù; The Embrace‚Äù - Hank Willis Thomas; ‚ÄúM√©morial Martin Luther King Jr.‚Äù - Lei Yixin; ‚ÄúBarack Obama Hope‚Äù - Shepard Fairey; ‚ÄúStill I Rise‚Äù - Maya Angelou. Chacune a √©t√© choisie pour son impact historique, √©motionnel et visuel." },
                    { content: "J‚Äôai ensuite particip√© √† la conception du sc√©nario et des m√©caniques de jeu. Nous avons divis√© le mus√©e en 4 zones th√©matiques, chacune proposant une ambiance, des m√©caniques sp√©cifiques, et un ensemble d‚Äô≈ìuvres adapt√©es. Pour renforcer l‚Äôimmersion, nous avons √©galement r√©fl√©chi √† une ambiance sonore adapt√©e √† chaque espace. L‚Äôexp√©rience se termine √† l‚Äôext√©rieur du mus√©e, dans un champ ouvert symbolisant la libert√©. Sur la partie 3D, j‚Äôai r√©alis√© une grande partie des mod√®les 3D sur 3ds Max, incluant des ≈ìuvres, des objets narratifs (comme des cl√©s ou portes interactives), et m√™me des √©l√©ments d‚Äôenvironnement comme un champ de coton. Certains objets n√©cessitaient des animations sp√©cifiques, que j‚Äôai √©galement r√©alis√©es.J‚Äôai ensuite textur√© l‚Äôensemble sur Substance 3D Painter, en utilisant des techniques avanc√©es de baking : cr√©ation d‚Äôobjets low-poly auxquels j‚Äôai appliqu√© les d√©tails de versions high-poly, pour optimiser le poids et la fluidit√© sans perte de qualit√© visuelle. Ce travail d‚Äôoptimisation s‚Äôinscrivait dans notre volont√© de cr√©er un jeu √©co-responsable, avec un usage r√©duit des ressources mat√©rielles." },
                    { content: "*Humanity* a √©t√© pour moi une exp√©rience extr√™mement enrichissante, tant sur le plan technique qu‚Äôhumain. J‚Äôai consolid√© mes comp√©tences en mod√©lisation, texturing, animation et int√©gration, tout en prenant en charge la coordination d‚Äôun projet √† plusieurs dimensions. Ce projet m‚Äôa √©galement permis de travailler sur des sujets sensibles, en apprenant √† traiter un th√®me historique fort avec respect, engagement et coh√©rence artistique. C‚Äôest aussi un projet qui m‚Äôa permis d‚Äôexp√©rimenter une cr√©ation engag√©e, dans laquelle les outils techniques et artistiques sont mis au service d‚Äôun message universel. L‚Äôimpact sur les membres du jury et les testeurs a √©t√© tr√®s positif, tant sur le fond que sur la forme, et nous a permis de d√©fendre un projet complet, structur√© et original." },
                ],
            },
            skills: {
                create: [
                    { skill: { connect: { id: skills[3].id } } }, // Mod√©lisation 3D
                    { skill: { connect: { id: skills[4].id } } }, // Texturing
                    { skill: { connect: { id: skills[7].id } } }, // Optimisation 3D
                    { skill: { connect: { id: skills[9].id } } }, // Communication
                    { skill: { connect: { id: skills[11].id } } }, // Animation 3D
                    { skill: { connect: { id: skills[13].id } } }, // Unreal Engine 5
                    { skill: { connect: { id: skills[14].id } } }, // Design de gameplay
                    { skill: { connect: { id: skills[23].id } } }, // Leadership
                    { skill: { connect: { id: skills[24].id } } }, // Gestion d'√©quipe
                    { skill: { connect: { id: skills[25].id } } }, // Esprit critique
                    { skill: { connect: { id: skills[26].id } } }, // Planification de projet
                    { skill: { connect: { id: skills[27].id } } }, // Eco-conception
                ],
            },
        },
    });

    console.log(`Projet "${project_04.title}" cr√©√© avec succ√®s !`);

    console.log("‚úÖ Seeding termin√© avec succ√®s !");

    //Fin du contenu seed

    res.json({ message: "Seed termin√©" });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Route pour r√©cup√©rer les projets
app.get("/projects", async (req, res) => {
    console.log("Route /projects appel√©e");
  console.log("DATABASE_URL:", process.env.DATABASE_URL ? "D√©finie" : "Non d√©finie");
  try {
    console.log("Tentative de connexion Prisma...");
    const projects = await prisma.project.findMany();
    console.log("‚úÖ Projets r√©cup√©r√©s:", projects.length, "projets");
    console.log("Projets:", JSON.stringify(projects, null, 2));
    res.json(projects);
  } catch (error) {
     console.error("‚ùå ERREUR dans /projects:");
    console.error("Message:", error.message);
    console.error("Code:", error.code);
    console.error("Stack complet:", error.stack);
    res.status(500).json({ 
      error: "Erreur lors de la r√©cup√©ration des projets",
      message: error.message 
    });
  }
  console.log("=== FIN route /projects ===");
});

app.post("/projects/reset", async (req, res) => {
    try {
        await prisma.project.deleteMany();

        res.json({ message: "Projets r√©initialis√©s avec succ√®s." });
    } catch (error) {
        console.error("Erreur lors de la r√©initialisation", error);
        res.status(500).json({ error: "Erreur lors de la r√©initialisation" });
    }
});

// API pour r√©cup√©rer un projet par son ID
app.get("/api/project/:id", async (req, res) => {
  const projectId = req.params.id;

  try {
      const project = await prisma.project.findUnique({
          where: { id: projectId },
          include: {
              images: true,
              paragraphs: true,
              skills: {
                  include: { skill: true }
              }
          }
      });

      if (!project) {
          return res.status(404).json({ error: "Projet non trouv√©" });
      }

      res.json(project);
  } catch (error) {
      console.error("Erreur API :", error);
      res.status(500).json({ error: "Erreur serveur" });
  }
});

app.use("/images", express.static(path.join(__dirname, "public/images")));

app.use(express.static(path.join(__dirname, '../client')));
app.use(express.static(path.join(__dirname, '../client/dist')));
app.use(express.static('public'));

app.get('*', (req, res) => {
  res.sendFile(path.join(__dirname, '../client/dist/index.html'));
});

// Lancer le serveur
const PORT = process.env.PORT || 3001;
app.listen(PORT, () => {
  console.log(`üöÄ Serveur d√©marr√© sur http://localhost:${PORT}`);
  console.log(`DATABASE_URL: ${process.env.DATABASE_URL}`);
});

